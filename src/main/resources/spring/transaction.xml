<?xml version="1.0" encoding="UTF8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.1.xsd
        
        http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
        
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
        >
            
    <!-- ****************** Konfiburacja Transactions (hibernate managment ****************** -->    
    
    <!--
        PROPAGATION_REQUIRED - zakres tworzony jest dla każdego wywołania metody. Mogą istnieć wewnątrz jednej innej globalnej transakcji. Każdy taki zakres wewnętrznej transakcji może wywołać rollback-only przerywający globalną transakcję

        REQUIRES_NEW - W przeciwieństwie do PROPAGATION_REQUIRED każda transakcja wewnętrzna używa całkowicie niezależnej transakcji dla każdego zakresu. Dlatego transakcję wewnętrzne nie mają wpływu na transakcje globalną zewnętrzną. 

        PROPAGATION_NESTED - możliwe jest ustawienie punktów zapisu. Jeśli wewnętrzna transakcja niepowiedzie się to wracamy do ostatniego takiego punktu. Tam określane jest czy przerwać transakcję globalną czy kontynuować. dostępne tylko dla JDBC
    -->
    
    <context:component-scan base-package="transaction,mkyong.stock">
    </context:component-scan>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- zdefiniowanie hibernatowego managera transkacji -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- wstrzyknięcie do ogólnego managera transakcji hibernatowego managera -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    
    <!-- ****************** Definiowanie transakcji ****************** -->    
        
        <!-- defines AOP advice for advising methods with transaction boundaries -->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="save*" propagation="REQUIRED"/> <!--Metody zaczynające się od nazwy add-->
<!--                <tx:method name="delete*" propagation="SUPPORTS" read-only="true"/> Wszystkie pozostałe metody-->
            </tx:attributes>
        </tx:advice>
        
        <!-- defines an advisor that uses the txAdvice to advice any beans that implemtnts interface: -->
        <aop:config>
            <aop:advisor
                pointcut="execution(* *..StockBo.*(..))"
                advice-ref="txAdvice"/>
        </aop:config>
        
    <!-- ****************** Definiowanie transakcji by Spring tutorial ****************** -->    
        
    <tx:advice id="txAdvice2" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <!-- rollback-for - określa po wyrzuceniu jakiego wyjątku wewnątrz transakcyjnej metody wywołany ma być rollback. no-rollback-for - przeciwieństwo do metody rollback-for -->
            <tx:method name="get*" read-only="true"/ rollback-for="NoProductInStockException" >
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*">
        </tx:attributes>
    </tx:advice>
    
    <!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
    </aop:config>
    
    <!-- A common requirement is to make an entire service layer transactional -->
    <aop:config>
        <aop:pointcut id="fooServiceMethods" expression="execution(* x.y.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods"/>
    </aop:config>

    
    <!-- ****************** Połączenie z bazą danych ****************** -->    
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>database.properties</value>
        </property>
    </bean>

    <bean id="dataSource" 
     class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>        
    
    <!-- Hibernate session factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>

        <property name="annotatedClasses">
            <list>
                <value>mkyong.stock.model.Stock</value>
            </list>
        </property>
    </bean>
    
</beans>