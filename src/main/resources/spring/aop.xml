<?xml version="1.0" encoding="UTF8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.1.xsd
        
        http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
         
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
        >
            
    <!-- ****************** AspectJ's pointcut expressions ****************** -->
    <!--
        args()      - limits join point matches to the execution of methods shose arguments are instances of the given types
        @args()     - limits join point matches to the execution of methods whose arguments are annotated with the given annotatation types
        execution() - matches join points that are method execution 
        this()      - limits join point matches to those where the bean reference of the AOP proxy is of a given type
        @target()   - limits matching to join points where the class of the executing object has an annotation of the given type
        within()    - limits matching to join points certain types
        @within()   - limits matching to join points within types that have the given annotation (...)
        @annotation - limits join point matches to those where the subject of the join points has the given annotation
    -->
    
    <!-- 
        <aop:advisor>   - defines advisor
        <aop:after>     - defines after advice (regardless of thether the advised method returns successfully)
        <aop:after-returning>   - defines after-returning advice
        <aop:after-throwing>   - defines after-throwing advice
        <aop:around>   - defines around advice
        <aop:aspect>   - defines aspects
        <aop:aspectj-autoproxy>   - enables annotation-driven aspects using @AspectJ
        <aop:before>   - defines before advice
        <aop:config>   - top-level aop element
        <aop:pointcut>   - defines pointcut
    -->
    
<!--    <bean id="audience" class="springidol.aop.Audience"/>-->
    
    <bean id="duke" class="springidol.Juggler">
        <constructor-arg value="155"/>
    </bean>
    
        <!-- Wywołanie własnych metod przed lub po wykonaniu pewnej funkcji -->
<!--    <aop:config>
        <aop:aspect ref="audience">
            
            <aop:before pointcut="execution(* springidol.Performer.perform(..))" method="takeSeats"/>
            <aop:before pointcut="execution(* springidol.Performer.perform(..))" method="turnOffCellPhones"/>
            <aop:after-returning pointcut="execution(* springidol.Performer.perform(..))" method="applaud"/>
            <aop:after-throwing pointcut="execution(* springidol.Performer.perform(..))" method="demandRefund"/>
            
        </aop:aspect>
    </aop:config>-->
    
    <!--    //To samo co powyżej z globalną definicją pointcut
    <aop:config>
        <aop:pointcut id="performance" expression="execution(* springidol.Performer.perform(..))"/>
        
        <aop:aspect ref="audience">
            
            <aop:before pointcut-ref="performance" method="takeSeats"/>
            <aop:before pointcut-ref="performance" method="turnOffCellPhones"/>
            <aop:after-returning pointcut-ref="performance" method="applaud"/>
            <aop:after-throwing pointcut-ref="performance" method="demandRefund"/>
            
        </aop:aspect>
    </aop:config>
    -->
    
    <!-- Wywołanie własnych metod przed lub po wykonaniu pewnej funkcji z użyciem atrybutu aop:around -->
<!--    <aop:config>
        <aop:aspect ref="audience">
            
            <aop:pointcut id="performance2" expression="execution(* springidol.Performer.perform(..))"/>
            <aop:around pointcut-ref="performance2" method="watchPerformance"/>
            
        </aop:aspect>
    </aop:config>-->
    
    
    <bean id="magician" class="springidol.aop.Magician"/>
    <bean id="volunteer" class="springidol.aop.Volunteer"/>
        
    
    <!-- prze wywołaniem metody Thinker.thinkOfSomething(String param1) zostaje wywołana metoda
         Magician.interceptThoughts(String param2) z parametrem param1 
    -->
    <aop:config>
        <aop:aspect ref="magician">
            
            <aop:pointcut id="thinking" expression="execution(* springidol.aop.Thinker.thinkOfSomething(java.lang.String)) and args(thoughtss)"/>
            <aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names="thoughtss"/>
            
            </aop:aspect>
    </aop:config>
    
    
    <bean id="contestantDelegate" class="springidol.aop.GraciousContestant"/>
    
    <!-- dodanie do istniejących klas nowej funkcjonalności -->
<!--    <aop:config>
        <aop:aspect>
            <aop:declare-parents 
                types-matching="springidol.Performer+" 
                implement-interface="springidol.aop.Contestant"
                default-impl="springidol.aop.GraciousContestant"
            />
                 delegate-ref="contestantDelegate"  //to samo co default-impl 
        </aop:aspect>
    </aop:config>-->
    
    <!-- element musi zostać dodany aby adnotacje @Aspect zaczęły działać. 
         Należy pamiętać, że można używać tylko springowych aspektów (before i after) pomimo, że używamy adnotacji AspectJ
    -->
    <aop:aspectj-autoproxy/>
    <bean id="audience2" class="springidol.aop.AudienceAnnotation" />
    
    <bean id="magician2" class="springidol.aop.Magician"/>
    <bean class="springidol.aop.ContestantIntroducer"/>
    
</beans>